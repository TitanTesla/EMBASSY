name: Windows Portable AppImage

on:
  push:
    paths:
      - 'desktop-fx/**'
      - 'desktop-fx/pom.xml'
      - 'desktop-fx/packaging/windows/**'
      - '.github/workflows/win-appimage.yml'
  workflow_dispatch: {}

jobs:
  build-win:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: desktop-fx

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 22 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '22'
          cache: maven
          cache-dependency-path: desktop-fx/pom.xml

      - name: Build (skip tests)
        run: mvn -q -DskipTests package

      - name: Compute JAR name
        run: |
          $jar = Get-ChildItem -Path target -Filter 'embassyfx-*.jar' |
            Where-Object { $_.Name -notmatch 'sources|javadoc' } |
            Select-Object -First 1
          if (-not $jar) { throw "No embassyfx-*.jar found in target/"; }
          "JAR_NAME=$($jar.Name)" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "Using JAR: $($jar.Name)"

      - name: Stage runtime deps (JAR + dependencies)
        run: |
          New-Item -ItemType Directory -Force -Path target\deps | Out-Null
          Copy-Item "target\${{ env.JAR_NAME }}" target\deps\
          mvn -q dependency:copy-dependencies -DincludeScope=runtime -DoutputDirectory=target/deps

      # Fetch JavaFX Windows jars into target\deps
      - name: Fetch JavaFX (Windows) jars
        shell: cmd
        run: |
          for %%M in (base graphics controls fxml) do (
            mvn -q dependency:get -Dartifact=org.openjfx:javafx-%%M:22.0.2:jar:win
            copy "%USERPROFILE%\.m2\repository\org\openjfx\javafx-%%M\22.0.2\javafx-%%M-22.0.2-win.jar" target\deps\
          )

      # Build a private JRE(Java Runtime Environment) that includes everything JavaFX/FXML needs
      - name: Create custom runtime (jlink)
        run: >
          jlink
          --add-modules java.se,java.scripting,jdk.unsupported,jdk.charsets
          --strip-debug --no-header-files --no-man-pages
          --output runtime

      # Package with that runtime; enable console to show errors if launch fails
      - name: jpackage (Windows app-image)
        run: >
          jpackage
          --type app-image
          --name EmbassyFX
          --dest packaging\windows
          --input target\deps
          --main-jar ${{ env.JAR_NAME }}
          --main-class app.Main
          --runtime-image runtime
          --app-version 1.0.0
          --icon packaging/windows/AppIcon.ico
          --win-console
          --java-options "--module-path %APPDIR% --add-modules=javafx.controls,javafx.fxml,javafx.graphics,javafx.base"

      # Overwrite the launcher CFG with the known-good content (UTF-8 w/o BOM)
      - name: Normalize launcher CFG
        run: |
          $cfg = @"
          [Application]
          app.mainclass=app.Main
          app.classpath=$APPDIR\${{ env.JAR_NAME }};$APPDIR\sqlite-jdbc-3.46.0.0.jar;$APPDIR\slf4j-api-1.7.36.jar

          [JavaOptions]
          java-options=--module-path
          java-options=$APPDIR
          java-options=--add-modules=javafx.controls,javafx.fxml,javafx.graphics,javafx.base
          "@
          $cfg | Set-Content -Encoding utf8NoBOM "packaging/windows/EmbassyFX/app/EmbassyFX.cfg"

      # Zip the portable folder
      - name: Zip portable folder
        run: |
          $src = 'packaging/windows/EmbassyFX/*'
          $dst = 'packaging/windows/EmbassyFX_win_portable.zip'
          if (Test-Path $dst) { Remove-Item -Force $dst }
          Compress-Archive -Path $src -DestinationPath $dst -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmbassyFX_win_portable
          path: desktop-fx/packaging/windows/EmbassyFX_win_portable.zip
